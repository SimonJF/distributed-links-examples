open ChatSessions


# New architecture:
# DOM handler function, handles messages from both moderator and
# chat messages when joined to the chat room.

module DomFunctions {
  var nickname_box_id = "name_box";
  var chat_box_id = "chat_box";

  fun getInputContents(dom_id) {
    var textNode = getNodeById(dom_id);
    domGetPropertyFromRef(textNode, "value")
  }

  fun clearInput(dom_id) {
    var textNode = getNodeById(dom_id);
    var _ = domSetPropertyFromRef(textNode, "value", "");
    ()
  }
}

open DomFunctions

fun mainPage() {
  # loop that receives input from
  # 1. the client (moderator) about removing and muting clients
  # 2. the server about users entering/leaving rooms so they can be removed
  #    from the dropdown selection box
# fun moderatorHandler(channel) {
#   fun makeOption(name) {
#     var to_add = <#><option id="/id_placeholder">
#                  {stringToXml(name)}</option></#>;
#     appendChildren(to_add, getNodeById("clientSelect"));
#     var _ = domSetAttributeFromRef(getNodeById("/id_placeholder"),
#                                    "value", name);
#     var _ = domSetAttributeFromRef(getNodeById("/id_placeholder"),
#                                    "id", "/moderator"^^name);
#     ()
#   }
#
#   fun makeOptions(names) {
#     switch(names) {
#       case [] -> ()
#       case x::xs -> makeOption(x); makeOptions(xs)
#     }
#   }
#
#   receive {
#     case NewUser(name) ->
#       makeOption(name);
#       moderatorHandler(channel)
#     case UserLeft(name) ->
#       removeNode(getNodeById("/moderator"^^name));
#       moderatorHandler(channel)
#     case Remove() ->
#       var selectedUser = getInputContents("clientSelect");
#       if (selectedUser == "") {
#         print("No option has been selected");
#         moderatorHandler(channel)
#       } else {
#         var channel = send(Nickname(selectedUser), select RemoveUser channel);
#         moderatorHandler(channel)
#       }
#     case Mute() ->
#       var selectedUser = getInputContents("clientSelect");
#       if (selectedUser == "") {
#         print("No option has been selected");
#         moderatorHandler(channel)
#       } else {
#         var channel = send(Nickname(selectedUser), select MuteUser channel);
#         moderatorHandler(channel)
#       }
#     case MakeModerator() ->
#       var selectedUser = getInputContents("clientSelect");
#       if (selectedUser == "") {
#         print("No option has been selected");
#         moderatorHandler(channel)
#       } else {
#         var channel = send(Nickname(selectedUser),
#                       select MakeModerator channel);
#         moderatorHandler(channel)
#       }
#     case MakeMeModerator(names) ->
#       print("Became a moderator");
#       domReplaceChildren(makeAdminBox(self()),
#                       getNodeById("adminBox_placehodler"));
#       makeOptions(names);
#       moderatorHandler(channel)
#   }
#  }


  fun displayChat(room, topic, clientSend, clientReceive, moderatorChan) {

    var outgoingAP = new();

    fun addToMsgBox(xml) {
      var msgsNode = getNodeById("msgs");
      appendChildren(xml, msgsNode);
      var scrollHeight = domGetPropertyFromRef(msgsNode, "scrollHeight");
      var _ = domSetPropertyFromRef(msgsNode, "scrollTop", scrollHeight);
      ()
    }

    fun addChatMsg(nick, msg) {
      var to_add = <#><p><b>{stringToXml(nick)}</b>: {stringToXml(msg)}</p></#>;
      addToMsgBox(to_add)
    }

    fun addNewUser(nick) {
      var to_add = <#><p><b>{stringToXml(nick)}</b> just joined</p></#>;
      addToMsgBox(to_add)
    }

    fun changeTopic(topic) {
      var topicNode = getNodeById("topic");
      var to_add = <#><p><span class="lead"><b>Topic: </b>{stringToXml(topic)}</span></p></#>;
      domReplaceChildren(to_add, topicNode)
    }

    fun removeUser(nick) {
      var to_add = <#><p><b>{stringToXml(nick)}</b> just left</p></#>;
      addToMsgBox(to_add)
    }

    fun muteUser(nick) {
      var to_add = <#><p><b>{stringToXml(nick)}</b> got muted :(</p></#>;
      addToMsgBox(to_add)
    }

    fun unmuteUser(nick) {
      var to_add = <#><p><b>{stringToXml(nick)}</b> got unmuted :D </p></#>;
      addToMsgBox(to_add)
    }

    fun incomingMsgLoop(s) {
      offer(s) {
        case IncomingChatMessage(s) ->
          var ((nick, chatmsg), s) = receive(s);
          debug("Received incoming chat message (" ^^ chatmsg ^^ ") from (" ^^ nick ^^ ")");
          addChatMsg(nick, chatmsg);
          incomingMsgLoop(s)
        case NewUser(s) ->
          var (nick, s) = receive(s);
          # moderatorPid ! NewUser(nick);
          addNewUser(nick);
          incomingMsgLoop(s)
        case NewTopic(s) ->
          var (topic, s) = receive(s);
          changeTopic(topic);
          incomingMsgLoop(s)
        case UserLeft(s) ->
          var (nick, s) = receive(s);
          # moderatorPid ! UserLeft(nick);
          removeUser(nick); # Poor Nick
          incomingMsgLoop(s)
        case UserMuted(s) ->
          var (nick, s) = receive(s);
          muteUser(nick);
          incomingMsgLoop(s)
        case UserUnmuted(s) ->
          var (nick, s) = receive(s);
          unmuteUser(nick);
          incomingMsgLoop(s)
        case BecomeModerator(s) ->
          var (chan, s) = receive(s);
          cancel(chan); # FIXME: FOR NOW ONLY!
          incomingMsgLoop(s)
        case Kick(_) ->
          # FIXME: We want to eliminate the use of redirect.
          redirect("/");
          ()
      }
    }

    sig outgoingMsgLoop : (ClientSend, Maybe(ModeratorSend)) ~> ()
    fun outgoingMsgLoop(clientSend, moderatorChan) {
      fun isTopicCmd(str) {
        (charAt(str, 0) == '/') &&
        (strlen(str) > 8) &&
        (strsub(str, 0, 7) == "/topic ")
      }

      fun getTopic(str) {
        strsub(str, 7, strlen(str) - 7)
      }

      # Synchronise on outgoingAP
      var (str, _) = receive(accept(outgoingAP));

      if (isTopicCmd(str)) {
        var clientSend = select ChangeTopic clientSend;
        var clientSend = send(getTopic(str), clientSend);
        outgoingMsgLoop(clientSend, moderatorChan)
      } else {
        var clientSend = select ChatMessage clientSend;
        var clientSend = send(str, clientSend);
        outgoingMsgLoop(clientSend, moderatorChan)
      }
      # TODO: Leaving chat room
    }


    fun chatBox() {
      fun submit() {
        var _ = send(getInputContents(chat_box_id), request(outgoingAP));
        clearInput(chat_box_id)
      }

      <#>
        <div id="chatBox">
          <div id="adminBox_placehodler"></div>
          <div id="topic"><p><span class="lead"><b>Room: </b>{stringToXml(room)}</span></p></div>
          <div id="topic"><p><span class="lead"><b>Topic: </b>{stringToXml(topic)}</span></p></div>
          <div id="msgs" style="overflow-y:scroll; width:100%; height:400px;"></div>
          <div>
            <form l:onsubmit="{submit()}">
              <input id="{chat_box_id}" type="text" style="width:100%"></input>
            </form>
          </div>
        </div>
      </#>
    }


    # Spawn process which sends messages to the server
    ignore(spawnClient { outgoingMsgLoop(clientSend, moderatorChan)});

    # Spawn process which handles incoming messages from the server
    ignore(spawnClient { incomingMsgLoop(clientReceive) });

    # Finally, remove the name request box, put the chatbox in, and start off
    domReplaceChildren(chatBox(), getNodeById("main"));
    # TODO: Add moderator handler box back in
    #if (is_mod) domReplaceChildren(makeAdminBox(modHandler),
    #                            getNodeById("adminBox_placehodler"))
    #else ()
  }

  # fun makeAdminBox(modHandler) {
  #   <#>
  #     <form id="adminForm" l:onsubmit="{()}">
  #       <p>
  #         <select id="clientSelect" required="required">
  #           <option value="">None selected</option>
  #         </select><br/>
  #         <input type="submit" id="adminRemove" value="Remove"
  #         l:onclick="{modHandler ! Remove() }"/>
  #         <input type="submit" id="adminMute" value="Mute/Unmute"
  #         l:onclick="{modHandler ! Mute() }"/>
  #         <input type="submit" id="adminMakeAdmin" value="Make moderator"
  #         l:onclick="{modHandler ! MakeModerator() }"/>
  #       </p>
  #     </form>
  #   </#>
  # }

  fun chooseRoom(ap) {
    var roomFormAP = new();

    fun submitRoom() {
      ignore(request(roomFormAP));
    }

    fun errToString(err) {
      switch(err) {
        case NameInUse -> "That nickname is already in use."
        case BadRoom -> "There was an error connecting to that room."
      }
    }

    fun roomSelectLoop(s, roomCount) {
      fun getRoomName(n) {
        if (n == 0) {
          getInputContents("newRoomText")
        } else {
          var domRef = getNodeById("room" ^^ intToString(n));
          if (domHasAttribute(domRef, "checked")) {
            domGetPropertyFromRef(domRef, "value")
          } else {
            getRoomName(n - 1)
          }
        }
      }

      # Wait for the form to be submitted
      ignore(accept(roomFormAP));
      var nickname = getInputContents("nickname");
      var roomName = getRoomName(roomCount);
      if (roomName == "") {
        print("Please enter a valid room name");
        roomSelectLoop(s, roomCount)
      } else {
        var s = send((nickname, roomName), s);
        offer(s) {
          case JoinedOK(s) ->
            var ((topic, clientReceive), s) = receive(s);
            displayChat(roomName, topic, s, clientReceive, Nothing)
          case JoinedOKAsModerator(s) ->
            var ((topic, clientReceive, modSend), s) = receive(s);
            displayChat(roomName, topic, s, clientReceive, Just(modSend))
          case Nope(s) ->
            var (err, _) = receive(s);
            print(errToString(err));
            # Try again.
            chooseRoom(ap)
        }
      }
    }

    fun makeRoomForm(rooms) {
      fun makeRadioRec(rooms, i) {
        switch(rooms) {
          case [] ->
            if (i == 0) {
            <#>
             <div class="radio">
                <label>
                  <input type="radio" name="roomName" id="newRoom" value="newRoom" />
                  New Room
                  <input type="text" id="newRoomName"  disabled="disabled"></input>
                </label>
              </div>
            </#>
            } else {
            <#>
             <div class="radio">
                <label>
                  <input type="radio" name="roomName"
                    id="newRoom" value="newRoom" checked="checked" />
                  New Room
                  <input type="text" id="newRoomName" />
                </label>
              </div>
            </#>
            }
          case x::xs ->
            var roomId = "room" ^^ (intToString(i));
            # If radio button is the first, it's checked by default
            var component =
              if (i == 0) {
                <#>
                  <input type="radio" name="roomName"
                    id="{roomId}" value="{x}" checked="checked" />
                </#>
              } else {
                <#>
                  <input type="radio" name="roomName"
                    id="{roomId}" value="{x}" />
                </#>
              };

            <#>
              <div class="radio">
                <label>
                  { component }
                  { stringToXml(x) }
                </label>
              </div>
              { makeRadioRec(xs, i + 1) }
            </#>
        }
      }
      <#>
        <form id="roomForm" l:onsubmit="{ submitRoom() }">
            <div>
              <label for="nickname">
                Nickname
              </label>
              <input type="text" id="nickname" />
            </div>
            { makeRadioRec(rooms, 0) }
            <div>
              <input type="submit" name="submitButton" value="Join" />
            </div>
        </form>
      </#>
    }

    # At submission, sends the room name and nickname to the server,
    # checks the response from the server, and either shows an error
    # and repeats, or proceeds to the main chat application
    # get all available rooms from the server and pick one via radio buttons

    # First: request from the AP to get a ClientConnect AP
    var (s: ClientConnect) = request(wap);
    # Next, grab the list of rooms
    var (rooms, s) = receive(s);

    # Next, populate the placeholder with the received rooms
    var generated_radio_dom = makeRoomForm(rooms);
    replaceNode(generated_radio_dom, getNodeById("room_placeholder"));

    # Finally, handle room selection
    roomSelectLoop(s, length(rooms));
  }

  fun start() {
    var _ = spawnClient { chooseRoom(wap) };
    page
      <html>
        <head>
          <title>Extended Links Chat Application</title>
          <link href="http://fonts.googleapis.com/css?family=Merriweather:400,300italic,300" rel="stylesheet" type="text/css"></link>
          <link href="http://fonts.googleapis.com/css?family=Kotta+One" rel="stylesheet" type="text/css"></link>
          <link href="http://fonts.googleapis.com/css?family=Lora" rel="stylesheet" type="text/css"></link>
          <link href="css/bootstrap.min.css" rel="stylesheet"></link>
          <link href="css/abcd.css" rel="stylesheet"></link>
        </head>

        <div class="navbar-wrapper">
          <div class="container">
            <div id="navbar" class="navbar navbar-inverse navbar-fixed-top" role="navigation">
            </div>
          </div>
        </div>

        <div class ="jumbotron">
          <div class="container">
            <h1>Links Session-Typed Chat</h1>
            <hr>...complete with totally original stylesheet</hr>
          </div>
        </div>


        <div id="main" class="container marketing">
          <div class="row featurette">
            <div id="roomSelect">
              <p> Choose one of the existing rooms or create a new one.</p>
              <div id="room_placeholder"></div>
            </div>
          </div>
        </div>
      </html>
  }
  start()
}
