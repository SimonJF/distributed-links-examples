open ChatSessions
open ChatClient

module MainServer {

    var ap = new();

    # Main server loop, containing server state. Awaits (non-session) control
    # messages to update the state, or broadcast instructions to send things
    # along session channels.
    fun serverLoop(topic, nicks, pids) {
      var ch = accept(ap);
      offer(ch) {
        case BroadcastMessage(ch) ->
          var ((nick, msg), _) = receive(ch);
          broadcastMessage(DeliverMessage(nick, msg), pids);
          serverLoop(topic, nicks, pids)
        case BroadcastChangeTopic(ch) ->
          var (newTopic, _) = receive(ch);
          broadcastMessage(DeliverNewTopic(newTopic), pids);
          serverLoop(newTopic, nicks, pids)
        case NewClient(ch) ->
          var ((nick, pid), _) = receive(ch);
          broadcastMessage(DeliverNewUser(nick), pids);
          serverLoop(topic, nick :: nicks, pid :: pids)
        case GetServerState(ch) ->
          ignore(send((topic, nicks), ch));
          serverLoop(topic, nicks, pids)
      }
    }

    # Broadcasts a given message to the mailboxes of a list of PIDs
    fun broadcastMessage(msg, pids) {
      switch(pids) {
        case [] -> ()
        case pid :: pids -> pid ! msg; broadcastMessage(msg, pids)
      }
    }

    fun broadcastChatMessage(nick, msg) {
        var s = request(ap);
        var s = select BroadcastMessage s;
        ignore(send((nick, msg), s))
    }

    fun broadcastChangeTopic(newTopic) {
        var s = request(ap);
        var s = select BroadcastChangeTopic s;
        ignore(send(newTopic, s))
    }

    fun broadcastNewClient(nick, pid) {
        var s = request(ap);
        var s = select NewClient s;
        ignore(send((nick, pid), s))
    }

    fun getServerState() {
        var s = request(ap);
        var s = select GetServerState s;
        var (res, _) = receive(s);
        res
    }
}

## clientHandler loop: Reads incoming requests from the client, dispatches
## each command to the serverLoop which will broadcast to other session clients.
# Alas, we can't make this an inner function at the moment since we need a type
# annotation, and type annotations are broken for inner functions at the moment
fun clientHandlerLoop(nick, clientToServerChan) {

  offer(clientToServerChan) {
    case ChatMessage(clientToServerChan) ->
      var (msg, clientToServerChan) = receive(clientToServerChan);
      MainServer.broadcastChatMessage(nick, msg);
      clientHandlerLoop(nick, clientToServerChan)
    case ChangeTopic(clientToServerChan) ->
      var (newTopic, clientToServerChan) = receive(clientToServerChan);
      MainServer.broadcastChangeTopic(newTopic);
      clientHandlerLoop(nick, clientToServerChan)
  }
}


# Process that is spawned to handle messages from the chat client.
fun clientHandler(nick, chatServerRecvEnd, serverToClientRecvEnd) {

  # Get the current topic and nicks
  var (topic, nicks) = MainServer.getServerState();

  # Send topic, nicks, and outgoing channel
  var chatServerRecvEnd =
    send((topic, nicks, serverToClientRecvEnd), chatServerRecvEnd);

  clientHandlerLoop(nick, chatServerRecvEnd)
}

fun clientSendHandler(s) {
  receive {
    case DeliverMessage(nick, msg) ->
      var s = select IncomingChatMessage s;
      var s = send((nick, msg), s);
      clientSendHandler(s)
    case DeliverNewUser(nick) ->
      var s = select NewUser s;
      var s = send(nick, s);
      clientSendHandler(s)
    case DeliverNewTopic(topic) ->
      var s = select NewTopic s;
      var s = send(topic, s);
      clientSendHandler(s)
    case DeliverUserLeft(nick) ->
      var s = select UserLeft s;
      var s = send(nick, s);
      clientSendHandler(s)
  }
}


fun handleNewClient(clientToServer) {
  # Get the name of the new client.
  var (name, clientToServer) = receive(clientToServer);

  # Fork off the client handler
  var serverToClient = linFork(
    linfun (serverToClient) {
      clientHandler(name, clientToServer, serverToClient)
  });

  # Fork off client send handler
  var pid = spawn { clientSendHandler(serverToClient) };

  # Register with the main loop
  MainServer.broadcastNewClient(name, pid);
}

fun acceptor(ap) server {
  # Accept a new client
  var clientToServerRecvEnd = accept(ap);
  var _ = spawn { handleNewClient(clientToServerRecvEnd) };
  acceptor(ap)
}

fun main() {
  var (clientAP:AP(ChatServer)) = new();
  var _ = spawn { MainServer.serverLoop(Topic("Hello, ABCD!"), [], []) };
  var _ = spawn { acceptor(clientAP) };
  addRoute("/", fun(_) { ChatClient.mainPage(clientAP) } );
  addStaticRoute("/css", "css", [("css", "text/css")]);
  serveWebsockets();
  servePages()
}

main()
