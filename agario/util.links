module Conversions {
  fun itos(x) { intToString(x) }
  fun ftoi(x) { floatToInt(x) }
  fun itof(x) { intToFloat(x) }
  fun ftos(x) { floatToString(x) }
}

module Colour {
  open Conversions

  fun dec_to_hex(d: Int) {
      # only works for 2-digit hex numbers
      var hex = [mod(d/16, 16), mod(d, 16)];
      var hex_str = map(fun(x) {switch(x) {
                                      case "10" -> "A"
                                      case "11" -> "B"
                                      case "12" -> "C"
                                      case "13" -> "D"
                                      case "14" -> "E"
                                      case "15" -> "F"
                                      case x -> x}},
                           map(itos, hex));
      hd(hex_str) ^^ hd(tl(hex_str))
  }

  fun hsv_to_rgb(h: Float, s: Float, v: Float) {
      var h_i = ftoi(6.0 *. h);
      var f = (6.0 *. h) -. itof(h_i);
      var p = v *. (1.0 -. s);
      var q = v *. (1.0 -. f *. s);
      var t = v *. (1.0 -. (1.0 -. f) *. s);

      var rgb = switch (h_i) {
                  case 0 -> [v, t, p]
                  case 1 -> [q, v, p]
                  case 2 -> [p, v, t]
                  case 3 -> [p, q, v]
                  case 4 -> [t, p, v]
                  case 5 -> [v, p ,q]
              };
      map(fun(x) {dec_to_hex(ftoi(256.0 *. x))}, rgb)
  }

  fun random_colour(h: Float, s:Float, v: Float) {
      # www.martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically
      var h =
          if (h == -.1.0) {
              var grc = 0.618033988749895;
              var gr = (random() +. grc);
              if (gr > 1.0) gr -. 1.0 else gr}
          else
              h;
      var vals = hsv_to_rgb(h, s, v);
      fold_left(fun(x,y){x^^y}, "#", vals)
  }

}
