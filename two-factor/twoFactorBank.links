typename Username = String;
typename Password = String;
typename ChallengeKey = Int;
typename Response = Int;
typename Secret = String;

typename TwoFactorServer =
  ?(Username, Password).[+|
    Authenticated: ServerMain,
    Challenge: !ChallengeKey.?Response.
      [+| Authenticated: ServerMain, AccessDenied: TwoFactorServer |+],
    AccessDenied: TwoFactorServer |+];

typename ServerMain = !Secret.End;
typename TwoFactorClient = ~TwoFactorServer;
typename ClientMain = ~ServerMain;



module Server {

  var needs2FA = true;

  sig checkDetails : (Username, Password) ~> Bool
  fun checkDetails(username, password) {
    (username == "Alice") && (password == "hunter2")
  }

  sig checkDetailsExn : (Username, Password) ~> Bool
  fun checkDetailsExn(username, password) {
    raise
  }

  sig serverMain : (ServerMain) ~> ()
  fun serverMain(s) {
    var _ = send("Poor PhD Student!", s);
    ()
  }

  fun generateKey() {
    floatToInt(random() *. 100000.0)
  }

  fun check2FAResponse(challenge, response) {
    debug("Response: " ^^ intToString(challenge));
    response == (challenge + 1)
  }

  fun twoFactorChallenge(s) {
    var challengeKey = generateKey();
    var s = select Challenge s;
    var s = send(challengeKey, s);
    var (response, s) = receive(s);
    if (check2FAResponse(challengeKey, response)) {
      var s = select Authenticated s;
      serverMain(s)
    } else {
      var s = select AccessDenied s;
      twoFactorServer(s)
    }
  }

  sig twoFactorServer : (TwoFactorServer) ~%~> ()
  fun twoFactorServer(s) {
    var ((username, password), s) = receive(s);
    if (checkDetails(username, password)) {
      if (needs2FA) {
        twoFactorChallenge(s)
      } else {
        var s = select Authenticated s;
        serverMain(s);
      }
    } else {
      var s = select AccessDenied s;
      twoFactorServer(s)
    }
  }

  sig twoFactorServerExn : (TwoFactorServer) ~> ()
  fun twoFactorServerExn(s) {
    var ((username, password), s) = receive(s);
    try checkDetails(username, password) as isAuthenticated in {
      if (isAuthenticated) {
        if (needs2FA) {
          twoFactorChallenge(s)
        } else {
          var s = select Authenticated s;
          serverMain(s);
        }
      } else {
        var s = select AccessDenied s;
        twoFactorServerExn(s)
      }
    } otherwise {
      cancel(s);
      print("An exception occurred!")
    }
  }

}

module Client {

  fun getInput(dom_id) {
    var textNode = getNodeById(dom_id);
    domGetPropertyFromRef(textNode, "value")
  }

  ## Client stuff

  sig alert: (Bool, String) ~> ()
  fun alert(isError, txt) {
    var alertNode =
      if (isError) {
        <#>
          <div class="alert alert-danger" role="alert">
            { stringToXml(txt) }
          </div>
        </#>
      } else {
        <#>
          <div class="alert alert-info" role="alert">
            { stringToXml(txt) }
          </div>
        </#>
      };

    domReplaceChildren(alertNode, getNodeById("alertBox"))
  }

  fun hideAlert() {
    domReplaceChildren(<#></#>, getNodeById("alertBox"))
  }

  sig showInfo : (String) ~> ()
  fun showInfo(txt) {
    alert(false, txt)
  }

  sig showError : (String) ~> ()
  fun showError(txt) {
    alert(true, txt)
  }

  sig loginFailed : () ~> ()
  fun loginFailed() {
    showError("Login failed!")
  }

  fun hideForm() {
    domReplaceChildren(<#></#>, getNodeById("formContainer"))
  }

  fun replaceForm(xml) {
    domReplaceChildren(xml, getNodeById("formContainer"))
  }


  fun showBalance(balance) {
    var xml =
      <#>
        <h1>Balance: { stringToXml(balance) }</h1>
      </#>;
    domReplaceChildren(xml, getNodeById("mainContainer"))
  }

  sig clientMain : (ClientMain) ~> ()
  fun clientMain(s) {
    var (balance, _) = receive(s);
    hideForm();
    showBalance(balance)
  }

  sig generateResponse : (ChallengeKey) -> Response
  fun generateResponse(key) {
    key + 1
  }

  sig onSubmit : (() ~%~@ ()) ~%~> ()
  fun onSubmit(f) {
    receive {
      case _ -> f()
    }
  }

  sig twoFactorClient : (String, String, TwoFactorClient) ~%~> ()
  fun twoFactorClient(username, password, s) {
    hideAlert();
    var s = send((username, password), s);
    offer(s) {
      case Authenticated(s) -> clientMain(s)
      case Challenge(s) -> 
        var (challengeKey, s) = receive(s);
        showChallengeForm(challengeKey, s)
      case AccessDenied(s) -> 
        loginFailed();
        showLoginForm(s)
    }
  }


  sig showLoginForm : (TwoFactorClient) ~%~> ()
  fun showLoginForm(s) {

    var hndlr = spawnClient {
      receive { case _ ->
        var username = getInput("username");
        var password = getInput("password");
        twoFactorClient(username, password, s)
      }
    };

    var form =
      <#>
          <form l:onsubmit="{ hndlr ! () }" class="form-signin">
            <label for="username" class="sr-only">Username</label>
            <input type="text" id="username" class="form-control"
              placeholder="username" required="true" autofocus="true"></input>
            <label for="inputpassword" class="sr-only">Password</label>
            <input type="password" id="password" class="form-control" 
              placeholder="password" required="true"></input>
            <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
          </form>
      </#>;
    replaceForm(form)
  }

  fun showChallengeForm(challengeKey, s) { 

    fun form(hndlr) {
      <#>
          <form l:onsubmit="{ hndlr ! () }" class="form-signin">
            <div>
              <p>It seems you are logging on from a new device.</p>
              <p>To ensure security of your account, please enter the following
                 key into your hardware token, and enter the digits shown on the screen</p>
               <p>Key: { stringToXml(intToString(challengeKey)) }</p>
            </div>
            <label for="challengeResponse" class="sr-only">challengeResponse</label>
            <input type="text" id="challengeResponse" class="form-control"
              placeholder="Response Code" required="true" autofocus="true"></input>
            <button class="btn btn-lg btn-primary btn-block" type="submit">Submit</button>
          </form>
      </#>
    }

    replaceForm(form(self()));

    onSubmit(linfun() {
      var response = getInput("challengeResponse");
      var s = send(stringToInt(response), s);
      offer(s) {
        case Authenticated(s) -> clientMain(s)
        case AccessDenied(s) -> loginFailed(); showLoginForm(s)
      }
    })
  }

  sig makePage : () ~> Page
  fun makePage() {
    var (clientEP : TwoFactorClient) = 
      fork (fun(serverEP) { Server.twoFactorServer(serverEP) }); 

    var _ = spawnClient {
      showLoginForm(clientEP); 
      showInfo("Please sign in.")
    };

    page
    <html>
      <head>
        <title>Bank of SPLS</title>
        <link href="css/bootstrap.min.css" rel="stylesheet"></link>
        <link href="css/signin.css" rel="stylesheet"></link>
        <script src="css/fontawesome-all.js"></script>
      </head>

      <body>
        <div id="pageBody" class="text-center wider">
          <i class="fas fa-university fa-7x"></i>
          <h1 class="h2 mb-2 font-weight-normal">Bank of SPLS</h1>
          <div id="alertBox"></div>
          <div id="formContainer"></div>
          <div id="mainContainer"></div>
        </div>
      </body>
    </html>

  }
}



##    <html>
##      <body>
##        <h1>Two-Factor Authentication</h1>
##        <div id="status">
##          <p>Status: <div id="statusText">Not logged in.</div></p>
##        </div>
##        <div id="pageBody"></div>
##      </body>
##    </html>

fun main() {
  addRoute("/", fun(_) { Client.makePage() });
  addStaticRoute("/css", "css", [("css", "text/css")]);
  serveWebsockets();
  servePages()
}

main()
